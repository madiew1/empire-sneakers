// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // pooled для рантайма/Studio
  directUrl = env("DIRECT_URL") // non-pooled для migrate/seed
}

/**
 * ====== ENUMS ======
 */
enum Role {
  USER
  ADMIN
}

enum VerificationType {
  EMAIL_VERIFY
  PHONE_OTP
  RESET_PASSWORD
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

/**
 * ====== AUTH ======
 */
model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  phone         String?   @unique
  password      String?
  emailVerified DateTime?
  phoneVerified DateTime?
  role          Role      @default(USER)

  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Cart Cart[]
}

model VerificationCode {
  id         Int              @id @default(autoincrement())
  identifier String // email или телефон
  tokenHash  String // хэш кода/токена
  type       VerificationType
  expiresAt  DateTime
  createdAt  DateTime         @default(now())

  @@index([identifier, type])
  @@index([expiresAt])
}

/**
 * ====== КАТАЛОГ ======
 */
model Brand {
  id       Int       @id @default(autoincrement())
  name     String
  slug     String    @unique
  products Product[]
}

model Category {
  id           Int               @id @default(autoincrement())
  name         String
  slug         String            @unique
  productLinks ProductCategory[]
}

model Material {
  id           Int               @id @default(autoincrement())
  name         String
  slug         String            @unique
  productLinks ProductMaterial[]
}

model Color {
  id           Int              @id @default(autoincrement())
  name         String
  slug         String           @unique
  hex          String
  productLinks ProductColor[]
  variants     ProductVariant[]
}

model Size {
  id           Int              @id @default(autoincrement())
  name         String           @unique // и для "S,M,L,XL", и для "40..45"
  productLinks ProductSize[]
  variants     ProductVariant[]
}

model Product {
  id              Int      @id @default(autoincrement())
  name            String
  slug            String   @unique
  imageUrl        String
  images          String[] @default([])
  price           Float
  currency        String   @default("EUR")
  discountPercent Float?
  description     String?  @db.Text
  isActive        Boolean  @default(true)

  brand   Brand @relation(fields: [brandId], references: [id])
  brandId Int

  categories ProductCategory[]
  materials  ProductMaterial[]
  colors     ProductColor[]
  sizes      ProductSize[]
  variants   ProductVariant[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/**
 * M:N связи
 */
model ProductCategory {
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  @@id([productId, categoryId])
}

model ProductMaterial {
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  material   Material @relation(fields: [materialId], references: [id])
  materialId Int

  @@id([productId, materialId])
}

model ProductColor {
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  color     Color   @relation(fields: [colorId], references: [id])
  colorId   Int

  @@id([productId, colorId])
}

model ProductSize {
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  size      Size    @relation(fields: [sizeId], references: [id])
  sizeId    Int

  @@id([productId, sizeId])
}

/**
 * Вариации товара (цвет + размер)
 */
model ProductVariant {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  color     Color   @relation(fields: [colorId], references: [id])
  colorId   Int
  size      Size    @relation(fields: [sizeId], references: [id])
  sizeId    Int

  sku   String? @unique
  price Float?
  stock Int     @default(0)

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  OrderItem OrderItem[]
  CartItem  CartItem[]

  @@unique([productId, colorId, sizeId])
}

/// ===== КОРЗИНА =====

model Cart {
  id        Int     @id @default(autoincrement())
  user      User?   @relation(fields: [userId], references: [id])
  userId    Int?
  /// Идентификатор гостевой сессии (cookie)
  sessionId String? @db.VarChar(64)

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  items CartItem[]

  @@unique([sessionId]) // можно иметь много NULL, но один и тот же sessionId — уникален
  @@index([userId])
}

model CartItem {
  id        Int            @id @default(autoincrement())
  cart      Cart           @relation(fields: [cartId], references: [id])
  cartId    Int
  variant   ProductVariant @relation(fields: [variantId], references: [id])
  variantId Int
  qty       Int            @default(1)
  /// Снэпшот цены на момент добавления в корзину
  price     Float
  addedAt   DateTime       @default(now())

  @@unique([cartId, variantId])
}

/**
 * ====== ЗАКАЗЫ (минимально для статусов) ======
 */
model Order {
  id        Int         @id @default(autoincrement())
  user      User?       @relation(fields: [userId], references: [id])
  userId    Int?
  status    OrderStatus @default(PENDING)
  total     Float       @default(0)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  items OrderItem[]
}

model OrderItem {
  id        Int            @id @default(autoincrement())
  order     Order          @relation(fields: [orderId], references: [id])
  orderId   Int
  variant   ProductVariant @relation(fields: [variantId], references: [id])
  variantId Int
  qty       Int            @default(1)
  price     Float
}

enum UserRole {
  USER
  ADMIN
}
