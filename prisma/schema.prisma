generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// *
///  * ====== AUTH ======
model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  phone         String?   @unique
  password      String?
  emailVerified DateTime?
  phoneVerified DateTime?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Cart          Cart[]
  orders        Order[]
}

model VerificationCode {
  id         Int              @id @default(autoincrement())
  identifier String
  tokenHash  String
  type       VerificationType
  expiresAt  DateTime
  createdAt  DateTime         @default(now())

  @@index([identifier, type])
  @@index([expiresAt])
}

/// *
///  * ====== КАТАЛОГ ======
model Brand {
  id       Int       @id @default(autoincrement())
  name     String
  slug     String    @unique
  products Product[]
}

model Category {
  id         Int          @id @default(autoincrement())
  name       String
  slug       String       @unique
  parentId   Int?
  parent     Category?    @relation("CategoryToChildren", fields: [parentId], references: [id])
  children   Category[]   @relation("CategoryToChildren")
  parentSlug String? // удобно держать для быстрого поиска по slug
  kind       CategoryKind @default(ROOT)
  order      Int? // для сортировки внутри уровня (опционально)

  productLinks ProductCategory[]

  @@index([parentId])
}

model Material {
  id           Int               @id @default(autoincrement())
  name         String
  slug         String            @unique
  productLinks ProductMaterial[]
}

model Color {
  id           Int              @id @default(autoincrement())
  name         String
  slug         String           @unique
  hex          String
  productLinks ProductColor[]
  variants     ProductVariant[]
}

model Size {
  id           Int              @id @default(autoincrement())
  name         String           @unique
  productLinks ProductSize[]
  variants     ProductVariant[]
}

model Product {
  id              Int               @id @default(autoincrement())
  name            String
  slug            String            @unique
  imageUrl        String
  images          String[]          @default([])
  price           Float
  currency        String            @default("EUR")
  discountPercent Float?
  description     String?
  isActive        Boolean           @default(true)
  brandId         Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  brand           Brand             @relation(fields: [brandId], references: [id])
  categories      ProductCategory[]
  colors          ProductColor[]
  materials       ProductMaterial[]
  sizes           ProductSize[]
  variants        ProductVariant[]
  groupKey        String?           @db.VarChar(191)

  @@index([groupKey])
}

/// *
///  * M:N связи
model ProductCategory {
  productId  Int
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])

  @@id([productId, categoryId])
}

model ProductMaterial {
  productId  Int
  materialId Int
  material   Material @relation(fields: [materialId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])

  @@id([productId, materialId])
}

model ProductColor {
  productId Int
  colorId   Int
  color     Color   @relation(fields: [colorId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@id([productId, colorId])
}

model ProductSize {
  productId Int
  sizeId    Int
  product   Product @relation(fields: [productId], references: [id])
  size      Size    @relation(fields: [sizeId], references: [id])

  @@id([productId, sizeId])
}

/// *
///  * Вариации товара (цвет + размер)
model ProductVariant {
  id        Int         @id @default(autoincrement())
  productId Int
  colorId   Int
  sizeId    Int
  sku       String?     @unique
  price     Float?
  stock     Int         @default(0)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  CartItem  CartItem[]
  OrderItem OrderItem[]
  color     Color       @relation(fields: [colorId], references: [id])
  product   Product     @relation(fields: [productId], references: [id])
  size      Size        @relation(fields: [sizeId], references: [id])

  @@unique([productId, colorId, sizeId])
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int?
  /// Идентификатор гостевой сессии (cookie)
  sessionId String?    @unique @db.VarChar(64)
  isActive  Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User?      @relation(fields: [userId], references: [id])
  items     CartItem[]

  @@index([userId])
}

model CartItem {
  id        Int            @id @default(autoincrement())
  cartId    Int
  variantId Int
  qty       Int            @default(1)
  /// Снэпшот цены на момент добавления в корзину
  price     Float
  addedAt   DateTime       @default(now())
  cart      Cart           @relation(fields: [cartId], references: [id])
  variant   ProductVariant @relation(fields: [variantId], references: [id])

  @@unique([cartId, variantId])
}

/// *
///  * ====== ЗАКАЗЫ (минимально для статусов) ======
model Order {
  id        Int         @id @default(autoincrement())
  userId    Int?
  status    OrderStatus @default(PENDING)
  total     Float       @default(0)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User?       @relation(fields: [userId], references: [id])
  items     OrderItem[]
}

model OrderItem {
  id        Int            @id @default(autoincrement())
  orderId   Int
  variantId Int
  qty       Int            @default(1)
  price     Float
  order     Order          @relation(fields: [orderId], references: [id])
  variant   ProductVariant @relation(fields: [variantId], references: [id])
}

/// *
///  * ====== ENUMS ======
enum Role {
  USER
  ADMIN
}

enum VerificationType {
  EMAIL_VERIFY
  PHONE_OTP
  RESET_PASSWORD
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

enum UserRole {
  USER
  ADMIN
}

enum CategoryKind {
  ROOT
  SECTION
  DROPDOWN
}
